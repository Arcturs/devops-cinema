name: CI-CD jobs

on:
  push:
    branches:
      - 'main'

jobs:
  build-backend:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          architecture: 'amd64'

      - name: Build backend
        run: |
          cd backend
          mvn clean package -B -DskipTests -Djavacpp.platform=linux-x86_64

  test-backend:
    needs: build-backend
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          architecture: 'amd64'

      - name: Run backend tests
        run: |
          cd backend
          mvn clean verify -Djacoco.haltOnFailure=false

  build-frontend:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

  test-frontend:
    needs: build-frontend
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test

  test-bot:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install bot dependencies
        run: |
          cd cinema-bot
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run bot tests with coverage
        run: |
          cd cinema-bot
          source venv/bin/activate
          PYTHONPATH=. pytest --cov=. --cov-report=xml

  sonarqube-combined-scan:
    needs: [test-frontend, test-backend, test-bot]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install frontend deps and generate coverage
        run: |
          cd frontend
          npm ci
          npm run coverage

      - name: Rebuild backend with reports
        run: |
          cd backend
          mvn verify -DskipTests=false

      - name: Recreate bot coverage
        run: |
          cd cinema-bot
          pip install -r requirements.txt
          PYTHONPATH=. pytest --cov=. --cov-report=xml

      - name: Run SonarQube self-hosted scan
        run: |
          npx sonar-scanner \
            -Dproject.settings=sonar-project.properties \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.qualitygate.wait=true

  docker-hub-push:
    needs: [sonarqube-combined-scan]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build backend image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/cinema_backend:latest ./backend

      - name: Build frontend image
        run: |
          docker build --build-arg VITE_API_BASE=http://158.160.157.207:30001 \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/cinema_frontend:latest ./frontend

      - name: Build bot image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/cinema_bot:latest ./cinema-bot

      - name: Push images
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/cinema_backend:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/cinema_frontend:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/cinema_bot:latest

  deploy:
    needs: [docker-hub-push]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Copy updated manifests to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.DEPLOY_SSH_HOST }}
          username: ${{ secrets.DEPLOY_SSH_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          source: "manifests/**"
          target: "/root/sertitan/devops-cinema-main"
          strip_components: 0  # сохранить структуру папок как есть

      - name: SSH into server and apply manifests
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_SSH_HOST }}
          username: ${{ secrets.DEPLOY_SSH_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd /root/sertitan/devops-cinema-main/manifests
            kubectl delete --all pods
            kubectl apply -f backend/
            kubectl apply -f frontend/
            kubectl apply -f bot/

